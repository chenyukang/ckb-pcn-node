import blockchain;

vector EcdsaSignature <byte>;
array SchnorrSignature [byte; 64];
array SchnorrXOnlyPubkey [byte; 32];
array PubNonce [byte; 66]; // PubNonce used by musig2 crate.
option PubNonceOpt (PubNonce);
array Pubkey [byte; 33];
option Uint64Opt (Uint64);

table OpenChannel {
    chain_hash:                  Byte32,
    channel_id:                  Byte32,
    funding_udt_type_script:     ScriptOpt,
    funding_lock_script:         Script,
    funding_amount:              Uint128,
    reserved_ckb_amount:         Uint64,
    funding_fee_rate:            Uint64,
    commitment_fee_rate:         Uint64,
    max_tlc_value_in_flight:     Uint128,
    max_num_of_accept_tlcs:      Uint64,
    min_tlc_value:               Uint128,
    to_self_delay:               Uint64,
    funding_pubkey:              Pubkey,
    revocation_basepoint:        Pubkey,
    payment_basepoint:           Pubkey,
    delayed_payment_basepoint:   Pubkey,
    tlc_basepoint:               Pubkey,
    first_per_commitment_point:  Pubkey,
    second_per_commitment_point: Pubkey,
    channel_annoucement_nonce:   PubNonceOpt,
    next_local_nonce:            PubNonce,
    channel_flags:               byte,
}

table AcceptChannel {
    channel_id:                  Byte32,
    funding_amount:              Uint128,
    funding_lock_script:         Script,
    reserved_ckb_amount:         Uint64,
    max_tlc_value_in_flight:     Uint128,
    max_num_of_accept_tlcs:      Uint64,
    min_tlc_value:               Uint128,
    to_self_delay:               Uint64,
    funding_pubkey:              Pubkey,
    revocation_basepoint:        Pubkey,
    payment_basepoint:           Pubkey,
    delayed_payment_basepoint:   Pubkey,
    tlc_basepoint:               Pubkey,
    first_per_commitment_point:  Pubkey,
    second_per_commitment_point: Pubkey,
    channel_annoucement_nonce:   PubNonceOpt,
    next_local_nonce:            PubNonce,
}

table CommitmentSigned {
    channel_id:                       Byte32,
    funding_tx_partial_signature:     Byte32,
    commitment_tx_partial_signature:  Byte32,
    next_local_nonce:                 PubNonce,
}

table TxSignatures {
    channel_id: Byte32,
    tx_hash:    Byte32,
    witnesses:  BytesVec,
}

table ChannelReady {
    channel_id: Byte32,
}

table TxUpdate {
    channel_id: Byte32,
    tx:         Transaction,
}

table TxComplete {
    channel_id: Byte32,
}

table TxAbort {
    channel_id: Byte32,
    message:    Bytes,
}

table TxInitRBF {
    channel_id: Byte32,
    fee_rate:   Uint64,
}

table TxAckRBF {
    channel_id: Byte32,
}

table Shutdown {
    channel_id:   Byte32,
    fee_rate:     Uint64,
    close_script: Script,
    force:        byte,
}

table ClosingSigned {
    channel_id: Byte32,
    partial_signature:  Byte32,
}

table AddTlc {
    channel_id:     Byte32,
    tlc_id:         Uint64,
    amount:         Uint128,
    payment_hash:   Byte32,
    expiry:         Uint64,
    hash_algorithm: byte,
    // This is the packet each hops need to decrypt and determine
    // which nodes to forward (or accept the tlc if it is the final node).
    onion_packet:   Bytes,
}

table RevokeAndAck {
    channel_id:                 Byte32,
    partial_signature:          Byte32,
    next_per_commitment_point:  Pubkey,
}

struct RemoveTlcFulfill {
    payment_preimage:   Byte32,
}

table RemoveTlcFail {
    error_code:         Uint32,
    packet_data:        Bytes,
}

union RemoveTlcReason {
    RemoveTlcFulfill,
    RemoveTlcFail,
}

table RemoveTlc {
    channel_id:         Byte32,
    tlc_id:             Uint64,
    reason:             RemoveTlcReason,
}

table ReestablishChannel {
    channel_id: Byte32,
    local_commitment_number: Uint64,
    remote_commitment_number: Uint64,
}

table AnnouncementSignatures {
    channel_id: Byte32,
    channel_outpoint: OutPoint,
    node_signature: EcdsaSignature,
    partial_signature: Byte32,
}

table NodeAnnouncement {
    // Signature to this message.
    signature: EcdsaSignature,
    // Tentatively using 64 bits for features. May change the type later while developing.
    // https://github.com/lightningdevkit/rust-lightning/blob/8c1b3d1263f6b9247c0c819039ef2027dc4d4588/lightning/src/ln/features.rs#L448-L457
    // rust-lightning uses a Vec<u8> here.
    features: Uint64,
    // Timestamp to the node announcement update, later update should have larger timestamp.
    timestamp: Uint64,
    node_id: Pubkey,
    // Must be a valid utf-8 string of length maximal length 32 bytes.
    alias: Byte32,
    // All the reachable addresses.
    address: BytesVec,
    // Chain hash
    chain_hash: Byte32,
}

table ChannelAnnouncement {
    node1_signature: EcdsaSignature,
    node2_signature: EcdsaSignature,
    // Signature signed by the funding transaction output public key.
    ckb_signature: SchnorrSignature,
    // Tentatively using 64 bits for features. May change the type later while developing.
    // https://github.com/lightningdevkit/rust-lightning/blob/8c1b3d1263f6b9247c0c819039ef2027dc4d4588/lightning/src/ln/msgs.rs#L1200-L1200
    // rust-lightning uses a Vec<u8> here.
    features: Uint64,
    chain_hash: Byte32,
    channel_outpoint: OutPoint,
    node1_id: Pubkey,
    node2_id: Pubkey,
    // The aggregated public key of the funding transaction output.
    ckb_key: SchnorrXOnlyPubkey,
    capacity: Uint128,
    udt_type_script: ScriptOpt,
}

table ChannelUpdate {
    // Signature of the node that wants to update the channel information.
    signature: EcdsaSignature,
    chain_hash: Byte32,
    channel_outpoint: OutPoint,
    timestamp: Uint64,
    message_flags: Uint32,
    channel_flags: Uint32,
    tlc_locktime_expiry_delta: Uint64,
    tlc_minimum_value: Uint128,
    tlc_maximum_value: Uint128,
    tlc_fee_proportional_millionths: Uint128,
}

table NodeAnnouncementQuery {
    node_id: Pubkey,
    flags: byte,
}

table ChannelAnnouncementQuery {
    channel_outpoint: OutPoint,
    flags: byte,
}

table ChannelUpdateQuery {
    channel_outpoint: OutPoint,
    flags: byte,
}

union BroadcastMessageQuery {
    NodeAnnouncementQuery,
    ChannelAnnouncementQuery,
    ChannelUpdateQuery,
}

vector BroadcastMessageQueries <BroadcastMessageQuery>;

union BroadcastMessage {
    NodeAnnouncement,
    ChannelAnnouncement,
    ChannelUpdate,
}

vector BroadcastMessages <BroadcastMessage>;

table GetBroadcastMessages {
    id: Uint64,
    queries: BroadcastMessageQueries,
}

table GetBroadcastMessagesResult {
    id: Uint64,
    messages: BroadcastMessages,
}

table QueryChannelsWithinBlockRange {
    id: Uint64,
    chain_hash: Byte32,
    start_block: Uint64,
    end_block: Uint64,
    // Maximal number of channels to return.
    count: Uint64Opt,
}

vector OutPoints <OutPoint>;

table QueryChannelsWithinBlockRangeResult {
    id: Uint64,
    // TODO: Using end block as the parameter for next query may result
    // in repeatedly send the same data in this block. We may want to
    // either enforce channels in the same block are always sent in the same batch
    // or use some offset/cursor for pagination.
    next_block: Uint64,
    is_finished: byte,
    channels: OutPoints,
}

table QueryBroadcastMessagesWithinTimeRange {
    id: Uint64,
    chain_hash: Byte32,
    start_time: Uint64,
    end_time: Uint64,
    // Maximal number of messages to return.
    count: Uint64,
}

table QueryBroadcastMessagesWithinTimeRangeResult {
    id: Uint64,
    // TODO: Using end time as the parameter for next query may result
    // in repeatedly send the same data with this timestampe. We may want to
    // either enforce messages with the same timestamp are always sent in the same batch
    // or use some offset/cursor for pagination.
    next_time: Uint64,
    is_finished: byte,
    queries: BroadcastMessageQueries,
}

union FiberMessage {
    OpenChannel,
    AcceptChannel,
    TxSignatures,
    TxUpdate,
    TxComplete,
    TxAbort,
    TxInitRBF,
    TxAckRBF,
    CommitmentSigned,
    ChannelReady,
    AddTlc,
    RemoveTlc,
    RevokeAndAck,
    Shutdown,
    ClosingSigned,
    ReestablishChannel,
    AnnouncementSignatures,
    NodeAnnouncement,
    ChannelAnnouncement,
    ChannelUpdate,
    GetBroadcastMessages,
    GetBroadcastMessagesResult,
    QueryChannelsWithinBlockRange,
    QueryChannelsWithinBlockRangeResult,
    QueryBroadcastMessagesWithinTimeRange,
    QueryBroadcastMessagesWithinTimeRangeResult,
}
